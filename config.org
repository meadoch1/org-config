#+TITLE: config.el
#+PROPERTY: header-args :tangle yes

#+BEGIN_SRC elisp
  (with-eval-after-load 'org
#+END_SRC

* Table of Contents :TOC_4_gh:
- [[#encryption][Encryption]]
  - [[#for-example][For example]]
- [[#look-and-feel][Look and feel]]
- [[#journal][Journal]]
- [[#keywords][Keywords]]
- [[#link-abbreviations][Link abbreviations]]
- [[#capture][Capture]]
  - [[#overview][Overview]]
  - [[#templates][Templates]]
    - [[#generic-meeting][Generic Meeting]]
    - [[#cfengine-customer-status-check-in][CFEngine Customer Status Check-in]]
    - [[#cfengine-sales][CFEngine Sales]]
    - [[#cfengine-backlog-grooming][CFEngine Backlog Grooming]]
    - [[#cfengine-planning][CFEngine Planning]]
    - [[#cfengine-standup][CFEngine Standup]]
    - [[#the-agent-is-in][The Agent is in]]
    - [[#security-team][Security Team]]
    - [[#sre-team][SRE Team]]
    - [[#unorganized][Unorganized]]
      - [[#fix-myorg-daily-review-capture-template-yesterday-so-that-it-inserts-yesterdays-date-in-the-headline][Fix =my/org-daily-review-capture-template-yesterday= so that it inserts yesterdays date in the headline]]
  - [[#configure-capture][Configure Capture]]
    - [[#daily-review][Daily Review]]
    - [[#meetings][Meetings]]
    - [[#capturing-under-currently-clocked-task][Capturing under currently clocked task]]
    - [[#capture-to-point][Capture to point]]
    - [[#capture-new-entry-to-org-journal][Capture new entry to org-journal]]
    - [[#pipe-into-example-block-from-outside-org-mode][Pipe into EXAMPLE block from outside org-mode]]
    - [[#selection-outside-emacs-into-currently-clocked-task][Selection (outside emacs) into currently clocked task]]
- [[#babel-src-blocks][Babel (SRC blocks)]]
- [[#exporting][Exporting]]
  - [[#publishing][Publishing]]
- [[#google-calendar-sync][Google Calendar Sync]]
  - [[#org-cal][org-cal]]
- [[#agenda][Agenda]]
- [[#clocking][Clocking]]
- [[#downloading][Downloading]]
  - [[#pictures][Pictures]]
- [[#jira][Jira]]
- [[#for-the-future][For the future]]
- [[#eof][EOF]]

* Encryption
:PROPERTIES:
:ID:       b4bded6c-9d3a-4570-9cc0-ae011226399b
:END:
 
GPG can be used to automatically encrypt sections of text tagged with /*crypt*/.

#+BEGIN_SRC elisp
  (require 'org-crypt)
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance (quote ("crypt")))
  (setq org-crypt-key "9274E588E866A10B713C9CCD9EB3AD425D1CCC11")
#+END_SRC

Sometimes, when I am at home, I will ssh into my laptop and run emacs at the shell, or attach to a running server with emacsclient.
I have had issues with gpg poping up a gui and then I can't decrupt from my ssh session. This resolves that for me.

#+BEGIN_SRC elisp
  (setq epa-pinentry-mode 'loopback)
  ;; not working (pinentry-start)
#+END_SRC

#+RESULTS:
: loopback

** For example  :crypt:
-----BEGIN PGP MESSAGE-----

hQIMA/jYNcPWXvJ6AQ/+ItpAIG1h5g31OxHivWHoEBnnKpOILl9bvbtv+rjxtRFL
aJxKFK6SL7iKdFogKyzU5EpS9qF9aRSH9eEivaiCcF8uYIbDQkU1EW5vadcUbpx5
oKm2JNy4QYy/Yj5709+gxO+zIITXN4Mo5CuXF9OKLp0euuwLm2bZkYrvjhryGLqe
lS3+bovvzX9VKdYYE5Bdulq5aTuVspOwpUhWcEJSql+Ittry9stpbeUa654ikEEn
UR5RVreZujYLQ4s0/+A1/kGAdp+3U+roef9FCcAH75eFkvw7OsLcw7YPyviCdPs0
lroZAYDfxYV0332Ak2nj+cMxdwm/lRPXQfqWJ+XJUxQadwaLjbsrqShZBOjjf3eP
6fXQHauLn0twJ1jAR5RePE+AqxHiY3b4Revfs+FwnBal5N+fiV5QaVSnEpbhGoWk
UrMKbm1yz0PP2vnm72j0nhZzf5uaT2MRItL2Fb2hDJexUaO745WqP69uk9kpdxm7
RHM/KDO1/g1gFt6XXDlFo+XzeaByhP6mEhbna3tk13660UR03CKRieYew4K3bJHJ
XUerJJ9O+mRwq1x/Fd22FUEs8ZOzuRHLWlRjfl9aNN7AK5UGCxANV3SEkc/I+HgM
vhdT3bWoYIjMQQCAFXMkLhXxzZKCr9W6iOWhIskKuFbyckxlmuC2KmeiP2tpO7/S
SgE1eqBxX6fpIM0Pzp2e5/XqB9tW6QxKavgBsCGu521UqS+XQTfX9K/Z0cFnpVsW
tJOSK/O5zYB2p4vGLcelSWN1+kkMgsgDwPv9
=AGgn
-----END PGP MESSAGE-----

* Look and feel
:PROPERTIES:
:ID:       7d815734-bf0e-4620-89e6-910416ec7cc6
:END:

#+BEGIN_SRC elisp
  ;; BEGIN org niceities
  ;; NOT WORKING!
  (setq-default dotspacemacs-large-file-size 3)
  (setq org-tags-match-list-sublevels 'indented)
  (setq org-startup-indented t)
  (setq org-startup-with-inline-images t)

  ;; Familiar zooming with Ctrl+ and Ctrl-
  (define-key global-map (kbd "C-+") 'text-scale-increase)
  (define-key global-map (kbd "C--") 'text-scale-decrease)

  (setq org-insert-heading-respect-content t)
  (setq org-id-link-to-org-use-id t)
  (setq org-id-track-globally t)

  ;; TODO Move this out from the org-layer, it's not org-specific.
  ;; Or make it specific to my org-files somehow https://emacs.stackexchange.com/a/3611
  (setq global-auto-revert-mode t)

  ;; Disable line highlighting in terminal mode (makes it hard to see)
  ;;(if display-graphic-p (global-hl-line-mode nil))
  ;; END org niceities
#+END_SRC

Variable pitch, and visual line mode for a better writing environment.
https://zzamboni.org/post/beautifying-org-mode-in-emacs/
#+CAPTION: variable pitch and visual line mode
#+BEGIN_SRC elisp
  (custom-theme-set-faces
   'user
   '(org-block                 ((t (:inherit fixed-pitch))))
   '(org-document-info         ((t (:foreground "dark orange"))))
   '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
   '(org-link                  ((t (:foreground "royal blue" :underline t))))
   '(org-meta-line             ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-property-value        ((t (:inherit fixed-pitch))) t)
   '(org-table                 ((t (:inherit fixed-pitch))) t) ;; Much improved, but right side of table still doesn't align
   '(org-verbatim              ((t (:inherit (shadow fixed-pitch)))))
   '(org-code                  ((t (:inherit (shadow fixed-pitch)))))
   '(org-special-keyword       ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-tag                   ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
   '(org-verbatim              ((t (:inherit (shadow fixed-pitch)))))
   '(org-indent                ((t (:inherit (org-hide fixed-pitch))))))
  (add-hook 'org-mode-hook 'variable-pitch-mode)
  (add-hook 'org-mode-hook 'visual-line-mode)
#+END_SRC

* Journal
:PROPERTIES:
:ID:       778fcfc3-5ca1-4af1-86a1-654c97260f3a
:END:

These need to be set earlier, like with the layer specification, for example:

#+BEGIN_SRC elisp :tangle no
  (org :variables
    org-enable-reveal-js-support t
    org-enable-org-journal-support t)
#+END_SRC 

#+BEGIN_SRC elisp
  (setq org-journal-dir "~/org/journal/")
  (setq org-journal-file-format "%Y-%m-%d")
  (setq org-journal-date-prefix "#+TITLE: ")
  (setq org-journal-date-format "%A, %B %d %Y")
  (setq org-journal-time-prefix "* ")
  (setq org-journal-time-format "")
  (setq org-want-todo-bindings t)
#+END_SRC
  
* ToDO Keywords
:PROPERTIES:
:ID:       9f7dc47a-843d-4d2d-8178-3053c57c30bf
:END:
  
#+BEGIN_SRC elisp
  ;; TODO Keywords
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "IN_PROGRESS(i)" "|" "DONE(d)")
                (sequence "WAITING(w@/)" "DELEGATED(D)" "HOLD(h@/)" "|" "CANCELLED(c@/)"))))

  ;; This conflicts with the evil key bindings in spacemacs, instead of using the old speedcommands, use =, T T= when inside org mode.
  ;;(setq org-use-fast-todo-selection t)
  ;;(setq org-use-speed-commands t)

#+END_SRC

* Link abbreviations
:PROPERTIES:
:ID:       2d641838-b9f5-4f89-a228-0bd570dab880
:END:
:(PROPERTIES):
:ID:       83e904da-0e44-4629-942f-c3a390e227fb
:END:
  
#+BEGIN_SRC elisp
      ;; Link abbreviations http://orgmode.org/manual/Link-abbreviations.html#Link-abbreviations
      ;; This makes it easy to create links in org files to common urls
      ;; Note: The actual link is not stored in the text, only when rendered
      ;; Usage: [[zendesk:2753]] or [[redmine:7481][My text]]
      (setq org-link-abbrev-alist
            '(
              ("cfe-function" . "https://docs.cfengine.com/docs/master/reference-functions-%s.htm")
              ("cfe-promise" . "https://docs.cfengine.com/docs/3.15/reference-promise-types-%s.htm")
              ("zendesk" . "https://cfengine.zendesk.com/agent/tickets/")
              ("redmine" . "https://dev.cfengine.com/issues/")
              ("core-pr" . "https://github.com/cfengine/core/pull/")
              ("mpf-pr" . "https://github.com/cfengine/masterfiles/pull/")
              ("core-commit" . "https://github.com/cfengine/core/commit/")
              ("mpf-commit" . "https://github.com/cfengine/masterfiles/commit/")
              ("jira" . "https://tracker.mender.io/browse/")))
#+END_SRC

* Capture :ATTACH:
:PROPERTIES:
:ID:       c6f828da-99c2-4354-80ef-9ab57c9f702d
:Attachments: 2018-11-13-26-27_2018-11-02_13-27-56.png 2018-11-13-26-50_2018-11-02_13-28-14.png
:END:
** Overview
I use capture templates to help me get information for common things in a
consistent way. I have capture templates for various types of meetings, and
different types of tasks that I work on.

#+DOWNLOADED: file:///home/nickanderson/Pictures/Screenshots/2018-11-13-26-27.png @ 2018-11-02 13:27:56
[[file:data/c6/f828da-99c2-4354-80ef-9ab57c9f702d/2018-11-13-26-27_2018-11-02_13-27-56.png]]


#+DOWNLOADED: file:///home/nickanderson/Pictures/Screenshots/2018-11-13-26-50.png @ 2018-11-02 13:28:14
[[file:data/c6/f828da-99c2-4354-80ef-9ab57c9f702d/2018-11-13-26-50_2018-11-02_13-28-14.png]]
** Templates
Templates can be external, probably it would be a good idea to try moving to
external template files instead of having huge templates in elisp. [[https://www.reddit.com/r/emacs/comments/7zqc7b/share_your_org_capture_templates/duqzj0r/][This post
from reddit.com/emacs]] shows an example using external templates.

*** Generic Meeting
:PROPERTIES:
:ID:       4b0d8c14-b69a-4956-8874-10b3d7641c99
:END:
#+BEGIN_SRC elisp
  (defvar my/org-meeting-template-generic "* %u %^{Meeting about} %^g
  CREATED: %U

  %?

  ,** Notes


  " "Meeting Template - Generic")
#+END_SRC

*** CFEngine Customer Status Check-in
:PROPERTIES:
:ID:       6dcf9681-425f-4bdc-8ded-c72f3ada392d
:END:
#+BEGIN_SRC elisp
  (defvar my/org-meeting-template-customer-status "* %u Status Check-in
  :PROPERTIES:
  %^{CUSTOMER}p
  :CREATED: %U
  :MAIL_TO: Team CFEngine <cfengine@northern.tech>
  :MAIL_SUBJECT: Meeting Notes: CFEngine Customer Sync
  :MAIL_FROM: Nick Anderson <nick.anderson@northern.tech>
  :END:

  %?

  ,*Attendees:*
    - Nick Anderson
    -

  ,** Info
  - Current versions running:
  - Next planned upgrade:
  - Upcoming platform changes:

  ,** Notes

  " "Meeting Template - Customer Status Check-in")
#+END_SRC

*** CFEngine Sales
:PROPERTIES:
:ID:       eefc7827-aa08-4c11-b68c-9ff0fa8a6331
:END:
#+BEGIN_SRC elisp
  (defvar my/org-meeting-template-cfengine-sales "* %u CFEngine Sales 
  %^{CUSTOMER}pCREATED: %U

  %?

  ,*Attendees:*
    - Nick Anderson
    -

  ,** Info
  - Platforms:
  - Infrastructure Size:
  - Key use cases:

  ,** Notes

  " "Meeting Template - CFEngine Sales")
#+END_SRC

*** CFEngine Backlog Grooming
:PROPERTIES:
:ID:       5f77724f-afa8-47bc-a858-32396a37472c
:END:

Bi-weekly meeting to make sure we are ready to work on our planned tasks.

*Agenda:*

- [[https://tracker.mender.io/issues/?filter=11300][Review New customer issues]]
- [[https://tracker.mender.io/secure/RapidBoard.jspa?rapidView=34][Review Progress on CFEngine Epics]]
- [[https://tracker.mender.io/issues/?filter=11205][Review Understanding of Next Bugs]]
- [[https://tracker.mender.io/secure/RapidBoard.jspa?rapidView=11&view=planning&epics=visible][Review CFEngine PM Backlog]]

#+BEGIN_SRC elisp
  (defvar my/org-meeting-template-grooming "* %u Meeting About CFEngine Grooming :internal_meeting:
  :PROPERTIES:
  :CREATED: %U
  :END:
  %?
  ,*Agenda:*
  - [[https://tracker.mender.io/secure/RapidBoard.jspa?rapidView=49&view=planning&selectedIssue=ENT-5265&epics=visible&issueLimit=100][CFEngine Epics]] (click the green/gray bars for summary)
  - [[https://tracker.mender.io/issues/?filter=11300][Review New customer issues]]
  - [[https://tracker.mender.io/issues/?filter=11205][Review Understanding of Next auto-prioritized Bugs]]
  - [[https://tracker.mender.io/secure/RapidBoard.jspa?rapidView=26&view=planning.nodetail&epics=visible&issueLimit=100][Review Backlog]]

  ,** Notes

  " "Meeting Template - Grooming")
#+END_SRC

*** CFEngine Planning
:PROPERTIES:
:ID:       113a8e92-53f7-4688-be4d-aa17cbed1512
:END:

#+BEGIN_SRC elisp
      ;; BEGIN Capture Templates
      ;; I picked up this neat trick from the Venerable Sacha Chua
      (defvar my/org-meeting-template-planning "* %u Meeting About CFEngine Planning
  CREATED: %U

  - [[https://docs.google.com/document/d/1OY8RgkRuUghr9rImrx7kzeHJAPlZw9XY5Is1sGf5Rt0/edit?usp=drive_web&ouid=105225911714445244426][CFEngine SCRUM log]]

  ,*Agenda:*
   - Review
     - Demos
   - Review work in progress
   - Review newly registered issues

  ,** Review
  ,*** Demos
  ,*** Leftovers

  ,#+CAPTION: Summary of story points remaining at end of sprint
  |---------+------------------------|
  |          | Story Points Remaining |
  |----------+------------------------|
  | UI       |                      0 |
  | Core     |                      0 |
  | Enablers |                      0 |
  |----------+------------------------|
  | *Total*  |                      0 |
  ,#+TBLFM: @3$2=remote(core-leftovers,$total)::@2$2=remote(ui-leftovers,$total)::@4$2=remote(enablers-leftovers,$total)::@5$2=vsum(@2..@-1)

  ,**** UI

  ,#+CAPTION: UI related story points left at end of sprint
  ,#+name: ui-leftovers
  |----------+--------------+-------------------------------------------------------|
  | Ticket   | SP Remaining | Comment                                               |
  |----------+--------------+-------------------------------------------------------|
  |          |              |                                                       |
  |----------+--------------+-------------------------------------------------------|
  | *Total*  |            0 |                                                       |
  | ^        |        total |                                                       |
  ,#+TBLFM: $total=vsum(@2..@-1)

  ,**** Core

  ,#+CAPTION: Core related story points left at end of sprint
  ,#+name: core-leftovers
  |----------+--------------+-------------------------------------------------------|
  | Ticket   | SP Remaining | Comment                                               |
  |----------+--------------+-------------------------------------------------------|
  |          |              |                                                       |
  |----------+--------------+-------------------------------------------------------|
  | *Total*  |            0 |                                                       |
  | ^        |        total |                                                       |
  ,#+TBLFM: $total=vsum(@2..@-1)

  ,**** Enablers

  ,#+CAPTION: Enablers related story points left at end of sprint
  ,#+name: enablers-leftovers
  |----------+--------------+-------------------------------------------------------|
  | Ticket   | SP Remaining | Comment                                               |
  |----------+--------------+-------------------------------------------------------|
  |          |              |                                                       |
  |----------+--------------+-------------------------------------------------------|
  | *Total*  |            0 |                                                       |
  | ^        |        total |                                                       |
  ,#+TBLFM: $total=vsum(@2..@-1)

  ,** Planning
  - [[https://tracker.mender.io/secure/Dashboard.jspa?selectPageId=11201][Sprint status]]
  - [[https://docs.google.com/spreadsheets/d/12WHg2SlP6xZ5oG0Dnw2KsOrAkDjeJ4o92osLBr_kbPc/edit?usp=drive_web&ouid=105225911714445244426][CFEngine Capacity]]
  - [[https://tracker.mender.io/issues/?filter=11205][Magical priority bug list]]
  - [[https://tracker.mender.io/issues/?filter=11300][New Customer issues in last two weeks]]
  - [[https://tracker.mender.io/issues/?filter=11211][Recently active customer related issues]]
  - [[https://tracker.mender.io/secure/RapidBoard.jspa?rapidView=49&view=detail][CFEngine SCRUM board]]
  - [[https://tracker.mender.io/secure/RapidBoard.jspa?rapidView=26][CFEngine Kanban board]]


  - New issues affecting customers
  - New issues not necessarily affecting customers

  " "Meeting Template - Planning")
#+END_SRC

*** CFEngine Standup
:PROPERTIES:
:ID:       fdeefc35-4d8d-4b94-95d1-2126bbabfe3b
:END:

#+CAPTION: Capture template for CFEngine Standup Meeting
#+BEGIN_SRC elisp
  (defun my/northern-tech-org-files ()
  "Return list of .org files containing information related to northern.tech. ( ~/org/refile.org, ~org/Work/northern.tech/, excluding temporary files (.# prefix)"

  (cl-remove-if (lambda (k)
                  ;; We remove temporary files (files containing .#) because it results in an
                  ;; error trying trying to generate a clocktable from the resulting list as that
                  ;; file appears and disappears.
                  (string-match "\\.#" k))
                (append
                 ;; Captures and most recent history is in my refile.org
                 '("~/org/refile.org")
                 ;; And my northern.tech specific tree
                 (directory-files-recursively "~/org/Work/northern.tech" "[^.]\\.*org$" nil))))

  (defvar my/org-meeting-template-standup "* %u CFEngine Standup  :internal_meeting:
  :PROPERTIES:
  :CREATED: %U
  :MAIL_TO:  cfengine@northern.tech
  :MAIL_SUBJECT: Standup Meeting: CFEngine
  :MAIL_FROM: Nick Anderson <nick.anderson@northern.tech>
  :END:

  ,#+BEGIN_NOTE
    Did you know, you can find a [[https://gitlab.com/nickanderson/northern.tech/blob/master/standup-meetings.org][history of standup meeting notes here]]?
  ,#+END_NOTE
  %?
  ,** Aleksei
  ,** Craig
  ,** Igor
  ,** Nick

  ,#+begin_src elisp :results list
    (org-ql-query
      :select '(org-get-heading t t)
      :where '(ts :from -1 :to today)
      :from (my/northern-tech-org-files)
       )
  ,#+end_src

  ,#+BEGIN: clocktable :stepskip0 t :fileskip0 t :maxlevel 2 :scope my/northern-tech-org-files :block yesterday :tags t :link nil :narrow 200!\n#+END

  ,** Ole
  ,** Vratislav

    " "Meeting Template - CFEngine Standup")
#+END_SRC

*** The Agent is in
:PROPERTIES:
:ID:       e6a1c237-8588-4c05-9210-19dbedc52f2e
:END:
#+CAPTION: Capture template for The Agent is in Meeting
#+BEGIN_SRC elisp
  (defvar my/org-meeting-template-the-agent-is-in "* %u The Agent is in :meeting:
  :PROPERTIES:
  :CREATED: %U
  :MAIL_TO:  people@northern.tech
  :MAIL_SUBJECT: %u The Agent is in
  :MAIL_FROM: Nick Anderson <nick.anderson@northern.tech>
  :END:

  ,#+BEGIN_NOTE
    Did you know, you can find a [[https://gitlab.com/nickanderson/northern.tech/blob/master/CFEngine/the-agent-is-in.org][history of The Agent is in  meetings]]?
  ,#+END_NOTE

  ,** Topics

    " "Meeting Template - The Agent is in")
#+END_SRC

*** Security Team
:PROPERTIES:
:ID:       e08e3a50-2fd7-4670-944e-7e72b90de350
:END:
#+CAPTION: Capture template for Security Team Meeting
#+BEGIN_SRC elisp
  (defvar my/org-meeting-template-security-team "* %u Security Team meeting notes
  :PROPERTIES:
  :CREATED: %U
  :MAIL_TO:  people@northern.tech
  :MAIL_SUBJECT: %u Security Team meating notes
  :MAIL_FROM: Nick Anderson <nick.anderson@northern.tech>
  :END:

  ,** Resources
  - [[https://docs.google.com/document/d/1KRwilxJlb8Qj4bkogn9ScTJf1MWh5thaAEEEFN-GoTw][Meeting notes and agenda]]
  - [[https://docs.google.com/spreadsheets/d/19ka3VJ2BwjjL_iYBNUre1lss_p7oBxZpXV2jklr1etc/][Working document]]
  - [[https://northern-tech.slack.com/archives/CT9ALP468][Slack channel]]
  - [[https://groups.google.com/a/cfengine.com/forum/#!forum/security][Mailing List]]
  - [[https://docs.google.com/document/d/1i1XYwjXkaaBn7irnIwFCNfgO4Gf7Ydt1Jk87ekBzWdg/][Original proposal]]
  ,** [[https://docs.google.com/document/d/1KRwilxJlb8Qj4bkogn9ScTJf1MWh5thaAEEEFN-GoTw][Review]] (what happened in the last month)
  ,**  [[https://docs.google.com/spreadsheets/d/19ka3VJ2BwjjL_iYBNUre1lss_p7oBxZpXV2jklr1etc/edit#gid=0][Proposals / ideas]]
  Everyone should bring 1-3 ideas that they can present, we can discuss and add to spreadsheet
  ,** Discussion / voting to narrow down which ideas to focus on
  ,** Action points / who will do what
    " "Meeting Template - Security Team")
#+END_SRC

*** SRE Team
:PROPERTIES:
:ID:       ba521309-39da-4dfb-9875-82804ff3f5fa
:END:
#+CAPTION: Capture template for Security Team Meeting
#+BEGIN_SRC elisp
  (defvar my/org-meeting-template-sre-internal-infra "* %u
  :PROPERTIES:
  :CREATED: %U
  :MAIL_TO:  Northern.tech SRE <sre@northern.tech>
  :MAIL_FROM: Nick Anderson <nick.anderson@northern.tech>
  :MAIL_SUBJECT: Nick's notes from SRE Internal Infrastructure Meeting on %u
  :END:

  - [[https://docs.google.com/document/d/1neXnS16brsb7Jdn-Sg-f1Wyoyo_O5MJIAW7_FzTKpfY/edit][Google Doc: Team meeting agenda and minutes]]
  - [[https://tracker.mender.io/issues/?jql=project%20in%20(%22Internal%20Infrastructure%22)%20ORDER%20BY%20updated%20DESC][Recent Infra activity]]

  ,** Topics

    " "Meeting Template - SRE Internal Infra")
#+END_SRC

*** Unorganized
:PROPERTIES:
:ID:       78db44bb-8de4-4da9-bb90-fd6e235f1e26
:END:

#+BEGIN_SRC elisp
      (defvar my/org-meeting-template "* %u %^{Meeting About ...}   %^G
  CREATED: %U

  ,*Attendees:*

   - [X] Nick Anderson
   - [ ] %?


  ,*Agenda:*
   -
   -

  ,*Notes:*


  " "Meeting Template")

      (defvar my/org-contact-capture-template "* %(org-contacts-template-name)
  CREATED: %U
  :PROPERTIES:
  :EMAIL: %(org-contacts-template-email)
  :END:\n")


      (defvar my/org-respond-email-capture-template "* TODO [#B] Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n#+BEGIN_QUOTE\n  %i\n#+END_QUOTE\n")

      (defvar my/org-capture-support "* TODO [#A] [[zendesk:%^{ISSUE}]]: %^{DESCRIPTION} :Support:\n%^{CUSTOMER}p\n%?\n")
      (defvar my/org-capture-jira "* TODO [#B] [[jira:%^{ISSUE}]]: %^{DESCRIPTION} %^G\n\n%?\n")
#+END_SRC

I like to generate a clocktable report for each day. I am not good about doing
it at the end of each day, so I have one that targets yesterday that I tend to
use when getting ready for my daily standup meeting.

#+BEGIN_SRC elisp
  (defvar my/org-daily-review-capture-template "* %u\n#+BEGIN: clocktable :stepskip0 t :fileskip0 t :maxlevel 2 :scope agenda :block today :tags t :link t :narrow 90!\n#+END%?\n")
  (defvar my/org-daily-review-capture-template-yesterday "* %u\n#+BEGIN: clocktable :stepskip0 t :fileskip0 t :maxlevel 2 :scope agenda :block yesterday :tags t: link t :narrow 90!\n#+END%?\n")
#+END_SRC

**** TODO Fix =my/org-daily-review-capture-template-yesterday= so that it inserts yesterdays date in the headline

I added this template with yesterday as the time block, so now it's quicker to
deal with the clocktable, but I still have to manually adjust the header.
** Configure Capture
:PROPERTIES:
:ID:       8bbfa3e2-4ad1-4cb5-ac24-9c2deeef5f37
:END:

I clock my time so that it's easier for me to look back and see what I was
working on, so I have all of my capture templates clock in during capture, and
then resume the clock for whatever was being clocked before the capture.

#+BEGIN_SRC elisp
  ;; Configure custom capture templates
  (setq org-capture-templates
        `(;; Note the backtick here, it's required so that the defvar based tempaltes will work!
          ;;http://comments.gmane.org/gmane.emacs.orgmode/106890

          ("t" "To-do" entry (file "~/org/refile.org")
           "* TODO %^{Task Description}\n%?\n\n" :clock-in t :clock-resume t :append t)

      
          ("i" "Issue")
          ("is" "Support" entry (file "~/org/refile.org") 
           ,my/org-capture-support :clock-in t :clock-resume t :append t)
          ("ij" "Jira" entry (file "~/org/refile.org")
           ,my/org-capture-jira :clock-in t :clock-resume t :append t)

          ("w" "Web site" entry
           (file "~/org/websites.org")
           "* %a :website:\n\n%U %?\n\n%:initial" :append t)

          ("r" "Respond to Email" entry (file "~/org/refile.org")
           ,my/org-respond-email-capture-template :clock-in t :clock-resume t :append t)

          ("c" "Contact" entry (file "~/org/x-files.org") ,my/org-contact-capture-template :append t)
#+END_SRC

*** Daily Review
:PROPERTIES:
:ID:       215a8602-d5c5-401c-b143-aac05db134c4
:END:

#+BEGIN_SRC elisp
          ("d" "Daily Review")
          ("dt" "Today" entry (file "~/org/Work/northern.tech/daily_reviews.org") ,my/org-daily-review-capture-template :clock-in t :clock-resume t :append t)
          ("dy" "Yesterday" entry (file "~/org/Work/northern.tech/daily_reviews.org") ,my/org-daily-review-capture-template-yesterday :clock-in t :clock-resume t :append t)
#+END_SRC

*** Meetings
:PROPERTIES:
:ID:       113ebbad-cf37-48d9-8bea-6245aa248a40
:END:

#+BEGIN_SRC elisp
          ("m" "Meetings" )
          ("md" "Meeting - Standup" entry (file "~/org/Work/northern.tech/standup-meetings.org" )
           ,my/org-meeting-template-standup :clock-in t :clock-resume t :append t :empty-lines-after 1)
          ("ma" "Meeting - Agent is in" entry (file "~/org/Work/northern.tech/CFEngine/the-agent-is-in.org" )
           ,my/org-meeting-template-the-agent-is-in :clock-in t :clock-resume t :append t :empty-lines-after 1)
          ("mc" "Meeting - Customer Status Check-in" entry (file "~/org/Work/northern.tech/customer-status-meetings.org" )
           ,my/org-meeting-template-customer-status :clock-in t :clock-resume t :append t :empty-lines-after 1)
          ("mg" "Meeting - Grooming" entry (file "~/org/Work/northern.tech/development-meetings.org" )
           ,my/org-meeting-template-grooming :clock-in t :clock-resume t :append t :empty-lines-after 1)
          ("mp" "Meeting - Planning/Review" entry (file "~/org/Work/northern.tech/development-meetings.org" )
           ,my/org-meeting-template-planning :clock-in t :clock-resume t :append t :empty-lines-after 1)
          ("mm" "Meeting - Generic" entry (file "~/org/Work/northern.tech/meetings.org" )
           ,my/org-meeting-template-generic :clock-in t :clock-resume t :append t :empty-lines-after 1)
          ("ms" "More Meetings ")
          ("msa" "Meeting - CFEngine Sales" entry (file "~/org/Work/northern.tech/meetings.org" )
           ,my/org-meeting-template-cfengine-sales :clock-in t :clock-resume t :append t :empty-lines-after 1)
          ("msr" "Meeting - SRE Infrastructure" entry (file "~/org/Work/northern.tech/sre-infrastructure.org" )
           ,my/org-meeting-template-sre-internal-infra :clock-in t :clock-resume t :append t :empty-lines-after 1)
          ("mse" "Meeting - Security Team" entry (file "~/org/Work/northern.tech/security-team-meetings.org" )
           ,my/org-meeting-template-security-team :clock-in t :clock-resume t :append t :empty-lines-after 1)
          ))
  ;; END Capture templates
  ;; Use UUIDs to identify each speicifc entry
  (add-hook 'org-capture-prepare-finalize-hook 'org-id-get-create)

  ;; https://emacs.stackexchange.com/questions/26119/org-mode-adding-a-properties-drawer-to-a-capture-template
  (defun add-property-with-date-created ()
    "Add CREATED property to the current item in ISO-8601 format."
    (interactive)
    (org-set-property "CREATED" (format-time-string "[%Y-%m-%d %a %H:%M]")))

  (add-hook 'org-capture-prepare-finalize-hook 'add-property-with-date-created)
#+END_SRC
*** Capturing under currently clocked task
:PROPERTIES:
:ID:       96443340-9441-4182-94b0-a6fe0dea2856
:END:

Here I use capturing to fill the desire for filling out templated information
under my current heading. Note, this won't work unless your *already* clocking
time.

#+BEGIN_SRC elisp :tangle no
  (add-to-list 'org-capture-templates
               ("c" "Capture to currently clocked task" entry
                (clock)
                "* %^{Description}\n%?\n\n" :clock-in t :clock-resume t :append t))
#+END_SRC

#+BEGIN_SRC elisp :tangle yes
  (add-to-list 'org-capture-templates
               `("C" "Capture contents to currently clocked task" plain
                (clock)
                "%i" :immediate-finish t :empty-lines 1))
#+END_SRC

*** Capture to point
:PROPERTIES:
:ID:       9a4c61ba-53fa-4751-b6b9-f2dfc478da42
:END:
https://emacs.stackexchange.com/questions/30595/how-to-org-capture-at-current-location

#+BEGIN_SRC elisp :tangle no
  (defun org-capture-at-point ()
  "Insert an org capture template at point."
  (interactive)
  (org-capture 0))
#+END_SRC

Using entry type =entry= instead of =plain= may result in the entry being added to the end of the current headline /or/ the end of the file.

#+BEGIN_SRC elisp :tangle yes
  (add-to-list 'org-capture-templates
               `("." "Capture to current location" plain
                 (function (lambda nil (goto-char  (point))))
                 "* %?\n%U\n" :clock-in t :clock-resume t :empty-lines 1))
#+END_SRC

#+RESULTS:
| . | Capture to current location | plain | (function (lambda nil (goto-char (point)))) | * %? |

*** Capture new entry to org-journal
:PROPERTIES:
:ID:       97d234e3-3947-4e90-89d9-077352fc00e0
:END:

#+CAPTION: Function to pick the correct journal file to capture a new entry to
#+BEGIN_SRC elisp :tangle yes
  (defun org-journal-find-location ()
    ;; Open today's journal, but specify a non-nil prefix argument in order to
    ;; inhibit inserting the heading; org-capture will insert the heading.
    (org-journal-new-entry t)
    ;; Position point on the journal's top-level heading so that org-capture
    ;; will add the new entry as a child entry.
    (goto-char (point-min)))
#+END_SRC

#+CAPTION: Add org-journal capture template
#+BEGIN_SRC elisp :tangle yes
(add-to-list 'org-capture-templates
             `("j" "Journal entry" entry
                (function org-journal-find-location)
                "* %^{Title}\n%U\n%i%?"))
#+END_SRC

*** Pipe into EXAMPLE block from outside org-mode
:PROPERTIES:
:ID:       4971af91-a668-416f-be92-572b1846e205
:END:

I want to be able to run a command (outside org-mode), and have the output
captured into my currently clocked task. [[http://www.howardism.org/Technical/Emacs/capturing-content.html][I picked this from Howard Abrams]].

#+BEGIN_SRC bash :tangle ~/bin/occ
#!/usr/bin/env bash
# Org capture to currently clocked task

# With this capture template:
# (add-to-list 'org-capture-templates
#                `("C" "Capture contents to currently clocked task" plain
#                 (clock)
#                 "%i" :immediate-finish t :empty-lines 1))

# Align the content in the example block appropriately
CONTENT="#+BEGIN_EXAMPLE
$(cat | sed 's/^/  /g')
#+END_EXAMPLE
"
emacsclient -c -nw \
  -e "(progn (org-capture-string \"$CONTENT\" \"C\") (delete-frame))"
#+END_SRC

Run ~something | occ~

*** Selection (outside emacs) into currently clocked task
:PROPERTIES:
:ID:       bde69a2a-0782-4a07-9020-7bf83cdefa4c
:END:

#+BEGIN_SRC emacs-lisp
  (defun ha/org-clipboard ()
    "Return the contents of the clipboard in org-mode format."
    (destructuring-bind (type contents) (ha/get-clipboard)
      (with-temp-buffer
        (insert contents)
        (if (eq :html type)
            (shell-command-on-region (point-min) (point-max) "pandoc -f html -t org" t t)
          (ha/slack-to-markdown-buffer)
          (shell-command-on-region (point-min) (point-max) "pandoc -f markdown -t org" t t))
        (buffer-substring-no-properties (point-min) (point-max)))))

  (defun ha/external-capture-to-org ()
    "Calls `org-capture-string' on the contents of the Apple clipboard."
    (interactive)
    (org-capture-string (ha/org-clipboard) "C")
    (ignore-errors
      (delete-frame)))

  (defun ha/get-clipboard ()
    "Returns a list where the first entry is the content type,
  either :html or :text, and the second is the clipboard contents."
    (if (eq system-type 'darwin)
        (ha/get-mac-clipboard)
      (ha/get-linux-clipboard)))

  (defun ha/get-linux-clipboard ()
    "Return the clipbaard for a Unix-based system. See `ha/get-clipboard'."
    (destructuring-bind (exit-code contents)
        (shell-command-with-exit-code "xclip" "-o" "-t" "text/html")
      (if (= 0 exit-code)
          (list :html contents)
        (list :text (shell-command-to-string "xclip -o")))))

  (defun ha/get-mac-clipboard ()
    "Returns a list where the first entry is the content type,
  either :html or :text, and the second is the clipboard contents."
    (destructuring-bind (exit-code contents)
        (shell-command-with-exit-code "osascript" "-e" "the clipboard as \"HTML\"")
      (if (= 0 exit-code)
          (list :html (ha/convert-applescript-to-html contents))
        (list :text (shell-command-to-string "osascript -e 'the clipboard'")))))
#+END_SRC


* Babel (SRC blocks)                                                 :ATTACH:
:PROPERTIES:
:ID:       01434efa-906d-4cde-893a-ce3ad19ceff2
:Attachments: screenshot_2018-10-30_20-56-48.png
:END:

I use SRC blocks a *lot*. 

=org-src-fontify-natively= makes syntax highlighting work within SRC blocks.

#+DOWNLOADED: /tmp/screenshot.png @ 2018-10-30 20:56:48
[[file:data/01/434efa-906d-4cde-893a-ce3ad19ceff2/screenshot_2018-10-30_20-56-48.png]]

#+BEGIN_SRC elisp
  (setq org-src-fontify-natively t)
#+END_SRC

Similarly, =org-src-tab-acts-natively= maks tab behave like the language of the
SRC block. This is handy for properly managing indention for code within a SRC
block.

#+BEGIN_SRC elisp
  (setq org-src-tab-acts-natively t)
  (defadvice yas-expand (around prefix-yas-expand)
    (let ((my-previous-tab-state org-src-tab-acts-natively))
      (setq org-src-tab-acts-natively nil)
      ad-do-it
      (setq org-src-tab-acts-natively my-previous-tab-state)))
  (ad-activate 'yas-expand)
#+END_SRC

Here we configure the languages supported by SRC blocks.

#+BEGIN_SRC elisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (shell . t) ; Works for sh, shell, bash
     (sql . t) ; PostgreSQL and more https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-sql.html
     (cfengine3 . t) ; CFEngine
     ;;(python . t)
     ;;(ruby . t)
     ;; (ditaa . t)
     ;; (http . t)
     ;; (plantuml . t)
     ;; (perl . t))
     ))

  ;; This is no longer needed. It's handled by the cfengine layer automatically if
  ;; it sees the org layer is also used.
  ;; https://github.com/syl20bnr/spacemacs/pull/11528
  ;; (when (configuration-layer/layer-usedp 'cfengine)
  ;;   ;;(require 'ob-cfengine3) ;; I have problems with capture templates if I don't
  ;;   ;; use this before capturing or require it.

  ;;   (append org-babel-load-languages
  ;;           '((cfengine3 . t)))
  ;;   )
#+END_SRC

#+BEGIN_SRC cfengine3 :exports both :tangle no
  bundle agent main
  {
      reports:
        "Hello world";
  }
#+END_SRC

#+RESULTS:
: R: Hello world

* Checklists                                                       :noexport:
SCHEDULED: <2019-03-24 Sun .+1d>
:PROPERTIES:
:RESET_CHECK_BOXES: t
:LAST_REPEAT: [2019-03-23 Sat 11:22]
:ID:       e696d771-662e-469d-95db-7c791d00cfe0
:END:
:LOGBOOK:
- State "DONE"       from ""           [2019-03-23 Sat 11:22]
- State "DONE"       from ""           [2019-03-23 Sat 11:22]
- State "DONE"       from ""           [2019-03-22 Fri 20:11]
- State "DONE"       from ""           [2019-03-22 Fri 20:04]
:END:

When working with recurring scheduled entreis, it can be useful to have a
checklist and when the TODO state transitions to DONE, the checklist
cautomatically clears.

- [ ] Automatically clear all checkboxes when marked done

#+BEGIN_SRC elisp
  ;; BEGIN org-checklist configuration
  (require `org-checklist)
  ;; END org-checklist configuration
#+END_SRC

* Exporting
:PROPERTIES:
:ID:       fb4ea199-89f2-4cc7-ba97-0a296e72aec7
:END:
  
#+BEGIN_SRC elisp
  ;; BEGIN exports
  ;; Disable exporting subscripts (I use a lot of underscores, and they are never for subscript)
  (setq org-export-with-sub-superscripts nil)

  (when (configuration-layer/package-usedp 'ox-jira)
    (add-to-list 'org-export-backends 'jira))

  (when (configuration-layer/layer-usedp 'markdown)
    (add-to-list 'org-export-backends 'md))

  ;; END exports 
#+END_SRC

** Publishing
:PROPERTIES:
:ID:       b87b7b21-cc07-4db3-b883-5fcfd194de57
:END:
   
#+BEGIN_SRC elisp
  ;; BEGIN Publishing
  (setq org-publish-project-alist
        '(
          ("journal"
           :base-directory "~/org/journal/"
           :base-extension ""
           :publishing-directory "~/journal/"
           :recursive t
           :publishing-function org-html-publish-to-pdf
           :headline-levels 1
           :autopreamble nil)
          ("cfengine-html"
           :base-directory "~/org/cfengine/"
           :base-extension "org"
           :publishing-directory "~/CFEngine/Google Drive/nicks_org"
           :recursive t
           :publishing-function org-html-publish-to-html
           :headline-levels 4
           :autopreamble t
           :eval "never-export")
          ("cfengine-org"
           :base-directory "~/org/cfengine/"
           :base-extension "org"
           :publishing-directory "~/CFEngine/Google Drive/nicks_org"
           :recursive t
           :publishing-function org-org-publish-to-org
           :headline-levels 4
           :autopreamble t)
          ("cfengine-pdf"
           :base-directory "~/org/cfengine/"
           :base-extension "org"
           :publishing-directory "~/CFEngine/Google Drive/nicks_org"
           :recursive nil
           :publishing-function org-latex-publish-to-pdf
           :headline-levels 4
           :autopreamble t)
          ("cfengine-txt"
           :base-directory "~/org/cfengine/"
           :base-extension "org"
           :publishing-directory "~/CFEngine/Google Drive/nicks_org"
           :recursive t
           :publishing-function org-ascii-publish-to-utf8
           :headline-levels 4
           :autopreamble t)

          ))
  ;; END Publishing
  ;; BEGIN org-agenda configuration
#+END_SRC

* Google Calendar Sync

** org-cal
:PROPERTIES:
:ID:       9a4b954a-2bc6-4e5e-892b-848edc2168f5
:END:

I considered using org-gcal, but I did not immediately see how to leverage
=~/authinfo.gpg= for secure credential storage.

* Agenda :ATTACH:
:PROPERTIES:
:ID:       fbd97b7f-c136-4069-95d3-42f4804d0f85
:Attachments: 2018-10-22-05-30_2018-10-30_22-08-02.png
:END:
I have been trying to learn the agenda for some time now, I just haven't been
able to make it stick in my workflow. I take notes in org for most things that I
am doing, and my working set of org files is about 20M.

#+BEGIN_SRC shell
  find ~/org -type f -name '*.org' -exec du -ch {} + | grep total$
  find ~/org -type f -name '*.org_archive' -exec du -ch {} + | grep total$
#+END_SRC

#+RESULTS:
| 4.2M | total |
| 12K  | total |

This helps me to both focus on todays stuff, and to reduce the time to build the
agenda.

#+BEGIN_SRC elisp
 (setq org-agenda-span 'day)
#+END_SRC

#+BEGIN_SRC elisp
  (defun +org/opened-buffer-files ()
    "Return the list of files currently opened in emacs"
    (delq nil
          (mapcar (lambda (x)
                    (if (and (buffer-file-name x)
                             (string-match "\\.org$"
                                           (buffer-file-name x)))

                  (buffer-list))))))

  (setq org-refile-targets '((+org/opened-buffer-files :maxlevel . 3)))

  ;;(setq org-refile-targets '( (directory-files-recursively "~/org/" "\.org$") )
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  ;; (setq org-agenda-files '( "~/org/refile.org"))
  ;; https://stackoverflow.com/a/41969519/2854727
  (setq org-agenda-files (my/northern-tech-org-files))
  (add-to-list 'org-agenda-files "~/org/refile.org" 'prepend)
  ;(directory-files-recursively "~/org/" "\.org$"))
  ;'( (sa-find-org-file-recursively "~/org/" "org" ) "~/.org-jira" ))
  ;'("~/org" "~/org/cfengine" "~/org/cfengine/customers" "~/.org-jira"))
  ;; It's hard to see them (at least with the default color). Also this is a
  ;; reccomended change to speed up the agenda (not that it's too slow for me).
  (setq org-agenda-dim-blocked-tasks nil)
  (setq org-agenda-prefix-format '"%b")
  ;; END org-agenda configuration
#+END_SRC

=org-timeline= shows a visualization of time spent throughout the day. For
example, here I see that I worked from 11:45-3:00 of non-stopped clocked time.

#+DOWNLOADED: file:///home/nickanderson/Pictures/Screenshots/2018-10-22-05-30.png @ 2018-10-30 22:08:02
[[file:data/fb/d97b7f-c136-4069-95d3-42f4804d0f85/2018-10-22-05-30_2018-10-30_22-08-02.png]]

#+BEGIN_SRC elisp :tangle no
  (when (configuration-layer/package-used-p 'org-timeline)
    (require 'org-timeline)
    (add-hook 'org-agenda-finalize-hook 'org-timeline-insert-timeline :append)
    )
#+END_SRC

# https://github.com/enisozgen/idle-org-agenda
#+CAPTION: Configuring idle-org-agenda
#+BEGIN_SRC elisp :tangle no
(custom-set-variables
 '(idle-org-agenda-interval 600) ;; 10 x 60 seconds
 '(idle-org-agenda-key "cb")     ;; Choose your specific agenda
 '(idle-org-agenda-mode t))
#+END_SRC

* Clocking
:PROPERTIES:
:ID:       627db646-a768-4d75-a0dd-ac752133da47
:END:
#+BEGIN_SRC elisp
  ;; BEGIN clocking configuration
  ;;(setq org-clock-continuously t) ; Start the clock time from the end of the previous clock fs
  (setq spaceline-org-clock-p t)
  (setq org-clock-idle-time 15)
  (custom-set-variables
   '(org-log-into-drawer t))
  (setq org-time-clocksum-format (quote (:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t)))
  ;; END clocking configuration
#+END_SRC

* Downloading
** Pictures
:PROPERTIES:
:ID:       130cbfea-a505-4129-bbc9-97b88ff9ad2e
:END:
[[https://github.com/abo-abo/org-download][org-download]] is installed by the org layer, it makes getting images into your
buffer from a URL or a screenshot easy. I like to use org-attach for storing the
images. It stores them in a tree based on the entrys UUID.

Use ~org-download-yank~ to grab an image, and ~org-download-screenshot~ to take
a screenshot.

#+BEGIN_SRC elisp
  (setq org-download-method 'attach)
#+END_SRC
* Jira
:PROPERTIES:
:ID:       acaa5143-4727-4511-b345-5a8dbbd44862
:END:

#+BEGIN_SRC elisp
  (when (configuration-layer/package-used-p 'org-jira)
             (setq jiralib-url "https://tracker.mender.io:443")
              (setq org-jira-working-dir "~/.org-jira"))
#+END_SRC

* For the future
- org-board :: Archive webpages

- org-clock-conveniance :: Functions to help manage clock times. Currently I
     clock automatically, and I don't fret too much about accuracy. But if I
     want to improve my clocking, this may be useful for ammending mistakes.

- org-gcal :: For integrating google calendar into org-mode, perhaps when I get
              better with agenda.

* EOF
:PROPERTIES:
:ID:       db85d403-eff0-4059-b44c-fa77a94abd44
:END:
#+BEGIN_SRC elisp
  )
#+END_SRC

